name = Remedi
author = Albert Schröder <sca21002@googlemail.com>
license = Perl_5
copyright_holder = Albert Schröder

; version provider
[Git::NextVersion]  ; version by bumping the last git release tag     

; choose files to include
[Git::GatherDir]    ; gather everting by git ls-files

[PruneCruft]        ; default stuff to skip
[ManifestSkip]      ; if -f MANIFEST.SKIP, skip those, too


; file modifications
[Encoding]
encoding = bytes
match = ^t/input_files/.*\.(tif|pdf|jp2|jpg|gif)$

[PkgVersion]    ; add $VERSION to module

[PodWeaver]     ; generate Pod
[%PodWeaver]    
Contributors.head = 2   ; add contributors section to Pod
Contributors.contributors[0] = Petra Schröder <Petra.Schroeder@bsb-muenchen.de>


; generated files
[MetaYAML]          ; generate META.yml
[License]           ; boilerplate license
[Readme]            ; build a README file

[ReadmeAnyFromPod]  ; generate README.md
type = markdown
filename = README.md
location = build

; xt tests
[PodSyntaxTests]
;[PodCoverageTests]
;[Test::Perl::Critic]          


; metadata
[AutoPrereqs]       ; add all prereqs automatically
extra_scanners = MooseXTypesCombine

[Prereqs::AuthorDeps]   ; add authordeps as develop/requires
; authordep Perl::PrereqScanner::Scanner::MooseXTypesCombine
; authordep Pod::Weaver::Section::Contributors

; build system
[ExtraTests]
[ExecDir]           ; add authordeps as develop/requires
[ShareDir]          ; include 'share/' for File::ShareDir
[MakeMaker]         ; create Makefile.PL

; manifest (after all generated files)
[Manifest]          ; create MANIFEST


; before release
[Git::CheckFor::CorrectBranch] ; ensure on master branch

[Git::Check]        ; ensure all files checked in

[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading

; release
[FakeRelease]       ; pretend to do [UploadToCPAN]

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)
  
[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v
   
; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual
  
[NextRelease]
     
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
      
[Git::Push]         ; push repo to remote
push_to = origin


